/**
 * ===========================================
 * JFreeReport : a free Java reporting library
 * ===========================================
 *
 * Project Info:  http://reporting.pentaho.org/
 *
 * (C) Copyright 2001-2007, by Object Refinery Ltd, Pentaho Corporation and Contributors.
 *
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation;
 * either version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this
 * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc.
 * in the United States and other countries.]
 *
 * ------------
 * ReportProgressEvent.java
 * ------------
 * (C) Copyright 2001-2007, by Object Refinery Ltd, Pentaho Corporation and Contributors.
 */

package org.jfree.report.event;

import java.util.EventObject;

/**
 * A report progress event notifies the listeners about the proceedings of the report processing. It is generated by the
 * report processor implementations.
 *
 * @author Thomas Morgner
 */
public class ReportProgressEvent extends EventObject implements Cloneable
{
  /**
   * An activity constant that indicates that the current report is currently being processed. (This is a boilerplate
   * event in case none of the other events matched.)
   */
  public static final int COMPUTING_LAYOUT = 0;

  /**
   * An activity constant that indicates that the report is precomputing values. This is usually the first stage of
   * report processing.
   */
  public static final int PRECOMPUTING_VALUES = 1;

  /**
   * An activity constant that indicates that the report's page-layout is being computed. This computes where pagebreaks
   * will be inserted and how many pages are available.
   */
  public static final int PAGINATING = 2;

  /**
   * An activity constant that indicates that the report content is generated. This is the final processing step.
   */
  public static final int GENERATING_CONTENT = 3;

  /**
   * The progress level is an indicator for the current processing level.
   */
  private int level;

  /**
   * The maximum value the progress level will get for this report.
   */
  private int maximumLevel;

  /**
   * The indicator for the current activity. One of COMPUTING_LAYOUT, PRECOMPUTING_VALUES, PAGINATING or
   * GENERATING_CONTENT.
   */
  private int activity;

  /**
   * The current row of the outermost master report.
   */
  private int row;
  /**
   * The maximum row of the outermost master report.
   */
  private int maximumRow;
  /**
   * The current physical page.
   */
  private int page;

  /**
   * Creates a new even without any properties defined. Use this to create a reusable event object.
   *
   * @param source the report processor that generated this event.
   */
  public ReportProgressEvent(final Object source)
  {
    super(source);
  }

  /**
   * Creates a new report-progress event.
   *
   * @param source       the report processor that generated this event.
   * @param activity     the current activity.
   * @param row          the currently processed row.
   * @param maximumRow   the number of rows in this local report.
   * @param page         the current page that is being processed.
   * @param level        the current processing level.
   * @param maximumLevel the maximum processing level.
   */
  public ReportProgressEvent(final Object source,
                             final int activity,
                             final int row,
                             final int maximumRow,
                             final int page,
                             final int level,
                             final int maximumLevel)
  {
    super(source);
    this.maximumLevel = maximumLevel;
    this.level = level;
    this.maximumRow = maximumRow;
    this.page = page;
    this.activity = activity;
    this.row = row;
  }

  /**
   * Returns a string representation of this object.
   *
   * @return a string representing the state of this object.
   */
  public String toString()
  {
    return "ReportProgressEvent[activity=" + activity //$NON-NLS-1$
        + ", row=" + row //$NON-NLS-1$
        + ", maximumRow=" + maximumRow //$NON-NLS-1$
        + ", page=" + page //$NON-NLS-1$
        + ", level=" + level //$NON-NLS-1$
        + ", maximumLevel=" + maximumLevel + ']'; //$NON-NLS-1$ //$NON-NLS-2$
  }

  /**
   * Returns the current row.
   *
   * @return the row.
   */
  public int getRow()
  {
    return row;
  }

  /**
   * Returns the current activity (one of COMPUTING_LAYOUT, PRECOMPUTING_VALUES, PAGINATING or GENERATING_CONTENT).
   *
   * @return the activity constant.
   * @see ReportProgressEvent#COMPUTING_LAYOUT
   * @see ReportProgressEvent#PRECOMPUTING_VALUES
   * @see ReportProgressEvent#PAGINATING
   * @see ReportProgressEvent#GENERATING_CONTENT
   */
  public int getActivity()
  {
    return activity;
  }

  /**
   * Returns the current page number.
   *
   * @return the current page.
   */
  public int getPage()
  {
    return page;
  }

  /**
   * Returns the total number of rows contained in this report's datasource.
   *
   * @return the number of rows.
   */
  public int getMaximumRow()
  {
    return maximumRow;
  }

  /**
   * Returns the maximum level the report processing can reach for the report that generated the event.
   *
   * @return the maximum level.
   */
  public int getMaximumLevel()
  {
    return maximumLevel;
  }

  /**
   * Returns the current processing level. Report processing is a multi-pass process, the level provides a linear
   * measurement of the current progress.
   *
   * @return the level.
   */
  public int getLevel()
  {
    return level;
  }

  /**
   * Reuses the report event by updating the internal properties. This is used as simple mean to reduce the number of
   * objects generated in the system and should not be used elsewhere.
   *
   * @param activity   the activity as constant.
   * @param row        the current row.
   * @param maximumRow the total rows in the datasource.
   * @param page       the current page.
   * @param level        the current processing level.
   * @param maximumLevel the maximum processing level.
   */
  public void reuse(final int activity,
                    final int row,
                    final int maximumRow,
                    final int page,
                    final int level,
                    final int maximumLevel)
  {
    this.maximumRow = maximumRow;
    this.page = page;
    this.activity = activity;
    this.row = row;
    this.maximumLevel = maximumLevel;
    this.level = level;
  }

  /**
   * Creats a copy of the current instance of this object.
   *
   * @return a copy of the current object as a new object.
   */
  public Object clone()
  {
    try
    {
      return super.clone();
    }
    catch (CloneNotSupportedException e)
    {
      throw new IllegalStateException("Cloning not successful.");
    }
  }

}
